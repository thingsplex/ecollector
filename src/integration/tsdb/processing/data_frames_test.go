package processing

import (
	"encoding/json"
	client "github.com/influxdata/influxdb1-client/v2"
	"testing"
)

func TestGroupByTagAndTime(t *testing.T) {

	responseStr := "{\n    \"Results\": [\n      {\n        \"Series\": [\n          {\n            \"name\": \"electricity_meter_energy\",\n            \"tags\": {\n              \"dev_id\": \"100\"\n            },\n            \"columns\": [\n              \"time\",\n              \"value\"\n            ],\n            \"values\": [\n              [\n                1611846000,\n                1.8800000000010186\n              ],\n              [\n                1611849600,\n                1.4599999999991269\n              ],\n              [\n                1611853200,\n                1.2099999999991269\n              ],\n              [\n                1611856800,\n                1.0999999999985448\n              ],\n              [\n                1611860400,\n                0.9099999999998545\n              ],\n              [\n                1611864000,\n                0.8900000000030559\n              ],\n              [\n                1611867600,\n                1.0399999999972351\n              ],\n              [\n                1611871200,\n                1.0300000000024738\n              ],\n              [\n                1611874800,\n                0.8400000000001455\n              ],\n              [\n                1611878400,\n                0.6899999999986903\n              ],\n              [\n                1611882000,\n                0.5800000000017462\n              ],\n              [\n                1611885600,\n                0.5499999999992724\n              ],\n              [\n                1611889200,\n                0.5599999999976717\n              ],\n              [\n                1611892800,\n                0.5500000000029104\n              ],\n              [\n                1611896400,\n                0.5499999999992724\n              ],\n              [\n                1611900000,\n                0.5999999999985448\n              ],\n              [\n                1611903600,\n                0.9599999999991269\n              ],\n              [\n                1611907200,\n                0.9000000000014552\n              ],\n              [\n                1611910800,\n                0.9000000000014552\n              ],\n              [\n                1611914400,\n                0.8899999999994179\n              ],\n              [\n                1611918000,\n                1.1599999999998545\n              ],\n              [\n                1611921600,\n                1.319999999999709\n              ],\n              [\n                1611925200,\n                1.5\n              ],\n              [\n                1611928800,\n                1.6699999999982538\n              ]\n            ]\n          },\n          {\n            \"name\": \"electricity_meter_energy\",\n            \"tags\": {\n              \"dev_id\": \"112\"\n            },\n            \"columns\": [\n              \"time\",\n              \"value\"\n            ],\n            \"values\": [\n              [\n                1611846000,\n                0.006000000000000005\n              ],\n              [\n                1611849600,\n                0.006000000000000005\n              ],\n              [\n                1611853200,\n                0.006000000000000005\n              ],\n              [\n                1611856800,\n                0.006000000000000005\n              ],\n              [\n                1611860400,\n                0.007000000000000117\n              ],\n              [\n                1611864000,\n                0.006000000000000005\n              ],\n              [\n                1611867600,\n                0.006000000000000005\n              ],\n              [\n                1611871200,\n                0.005999999999999783\n              ],\n              [\n                1611874800,\n                0.0030000000000001137\n              ],\n              [\n                1611878400,\n                0\n              ],\n              [\n                1611882000,\n                0\n              ],\n              [\n                1611885600,\n                0\n              ],\n              [\n                1611889200,\n                0\n              ],\n              [\n                1611892800,\n                0\n              ],\n              [\n                1611896400,\n                0\n              ],\n              [\n                1611900000,\n                0.004999999999999893\n              ],\n              [\n                1611903600,\n                0.007000000000000117\n              ],\n              [\n                1611907200,\n                0.006000000000000005\n              ],\n              [\n                1611910800,\n                0.006000000000000005\n              ],\n              [\n                1611914400,\n                0.006000000000000005\n              ],\n              [\n                1611918000,\n                0.006000000000000005\n              ],\n              [\n                1611921600,\n                0.0020000000000000018\n              ],\n              [\n                1611925200,\n                0\n              ],\n              [\n                1611928800,\n                6.661338147750939e-16\n              ]\n            ]\n          },\n          {\n            \"name\": \"electricity_meter_energy\",\n            \"tags\": {\n              \"dev_id\": \"30\"\n            },\n            \"columns\": [\n              \"time\",\n              \"value\"\n            ],\n            \"values\": [\n              [\n                1611849600,\n                0\n              ],\n              [\n                1611853200,\n                0.10700552804098606\n              ],\n              [\n                1611856800,\n                0.0020032610219971048\n              ],\n              [\n                1611860400,\n                0\n              ],\n              [\n                1611864000,\n                0.041000366209999584\n              ],\n              [\n                1611867600,\n                0.03999328613301145\n              ],\n              [\n                1611871200,\n                0\n              ],\n              [\n                1611874800,\n                0\n              ],\n              [\n                1611878400,\n                0\n              ],\n              [\n                1611882000,\n                0\n              ],\n              [\n                1611885600,\n                0\n              ],\n              [\n                1611889200,\n                0.0010070800780113132\n              ],\n              [\n                1611892800,\n                0\n              ],\n              [\n                1611896400,\n                0\n              ],\n              [\n                1611900000,\n                0.08699035644599462\n              ],\n              [\n                1611903600,\n                0.03401184081999986\n              ],\n              [\n                1611907200,\n                0\n              ],\n              [\n                1611910800,\n                0\n              ],\n              [\n                1611914400,\n                0\n              ],\n              [\n                1611918000,\n                0\n              ],\n              [\n                1611921600,\n                0\n              ],\n              [\n                1611925200,\n                0.0009918212890056566\n              ],\n              [\n                1611928800,\n                0\n              ]\n            ]\n          }\n        ],\n        \"Messages\": null\n      }\n    ]\n  }"
	var response client.Response
	err := json.Unmarshal([]byte(responseStr), &response)
	if err != nil {
		t.Fatal("incorrect request")
	}

	groups := map[string][]string{"loc1":{"100","112"},"loc2":{"30"}}

	frame := NewEcDataFrame()
	frame.LoadFromInfluxResponse(response.Results[0],"dev_id",groups)
	frame.AggregateByGroupAndTime()
	err = frame.SaveToCSVFile("aggregate_by_tag_time.csv")
	if err != nil {
		t.Error(err)
	}

	frame2 := NewEcDataFrame()
	frame2.LoadFromInfluxResponse(response.Results[0],"dev_id",groups)
	frame2.AggregateByGroup()
	err = frame2.SaveToCSVFile("sum_by_tag.csv")
	if err != nil {
		t.Error(err)
	}

}
